import logging
import os
import sqlite3
import time
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from PIL import Image
import imagehash

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "0"))
DB_FILE = "photos.db"

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–ª—å–±–æ–º–æ–≤
temp_albums = {}

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS hashes (hash TEXT PRIMARY KEY)")
    conn.commit()
    conn.close()

def hash_exists(img_hash):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT 1 FROM hashes WHERE hash = ?", (img_hash,))
    return cursor.fetchone() is not None

def save_hash(img_hash):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO hashes (hash) VALUES (?)", (img_hash,))
        conn.commit()
    except sqlite3.IntegrityError:
        pass
    conn.close()

async def check_photos_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = update.effective_user
    message = update.message
    
    # –ê–¥–º–∏–Ω–∞–º –º–æ–∂–Ω–æ –≤—Å—ë
    if user.id == ADMIN_USER_ID:
        return
        
    if not message or not message.photo:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–æ—Ç–æ (–±–æ–ª—å—à–µ 2 –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
    if not message.media_group_id:
        if len(message.photo) > 2:
            warning = "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –±–æ–ª—å—à–µ 2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
            await message.reply_text(warning, reply_to_message_id=message.message_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å–±–æ–º–æ–≤ (–≥—Ä—É–ø–ø —Ñ–æ—Ç–æ)
    else:
        album_id = message.media_group_id
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ª—å–±–æ–º—ã (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞) –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        current_time = time.time()
        albums_to_remove = []
        for aid, data in list(temp_albums.items()):
            if current_time - data.get('timestamp', 0) > 3600:
                albums_to_remove.append(aid)
        for aid in albums_to_remove:
            del temp_albums[aid]
        
        if album_id not in temp_albums:
            temp_albums[album_id] = {
                'count': 1,
                'first_message_id': message.message_id,
                'warning_sent': False,
                'timestamp': current_time
            }
        else:
            temp_albums[album_id]['count'] += 1
            
        # –ï—Å–ª–∏ –≤ –∞–ª—å–±–æ–º–µ –±–æ–ª—å—à–µ 2 —Ñ–æ—Ç–æ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å
        if (temp_albums[album_id]['count'] > 2 and 
            not temp_albums[album_id]['warning_sent']):
            
            warning = "üì∏ –í –∞–ª—å–±–æ–º–µ –±–æ–ª—å—à–µ 2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
            await message.reply_text(warning, 
                                   reply_to_message_id=temp_albums[album_id]['first_message_id'])
            temp_albums[album_id]['warning_sent'] = True

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ + –ª–∏–º–∏—Ç–æ–≤)"""
    user = update.effective_user
    message = update.message

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ
    await check_photos_limit(update, context)
    
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    if user.id == ADMIN_USER_ID:
        return

    # –ó–∞—â–∏—Ç–∞ –æ—Ç None (–Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫)
    if not message or not message.photo:
        return

    photo = message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    file_path = f"temp_{photo.file_id}.jpg"
    await file.download_to_drive(file_path)

    try:
        image = Image.open(file_path)
        img_hash = str(imagehash.average_hash(image))

        if hash_exists(img_hash):
            mention = f"@{user.username}" if user.username else f"[{user.first_name}](tg://user?id={user.id})"
            await update.effective_chat.send_message(
                text=f"‚ö†Ô∏è {mention}, —ç—Ç–æ —Ñ–æ—Ç–æ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ!",
                reply_to_message_id=message.message_id,
                parse_mode="Markdown"
            )
            await message.delete()
        else:
            save_hash(img_hash)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)

def main():
    if not TOKEN:
        raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞! –î–æ–±–∞–≤—å –µ—ë –≤ Environment Variables –Ω–∞ Render.")

    logging.basicConfig(level=logging.INFO)
    init_db()

    app = Application.builder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    # –£–ë–†–ê–õ–ò JobQueue - —Ç–µ–ø–µ—Ä—å –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞–ª—å–±–æ–º–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º —Ñ–æ—Ç–æ

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Render
    port = int(os.environ.get("PORT", 8443))
    webhook_url = os.environ.get("RENDER_EXTERNAL_URL")

    if webhook_url:
        logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook: {webhook_url}")
        app.run_webhook(
            listen="0.0.0.0",
            port=port,
            webhook_url=webhook_url,
            url_path="",
        )
    else:
        logging.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º (polling)")
        app.run_polling()

if __name__ == "__main__":
    main()
