import asyncio
import json
import logging
import os
import time
from collections import defaultdict
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest

from config import BOT_TOKEN, TARGET_CHAT_ID, QUEUE_FILE, STATE_FILE

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –ë—É—Ñ–µ—Ä –¥–ª—è –∞–ª—å–±–æ–º–æ–≤ - —É–ª—É—á—à–µ–Ω–Ω—ã–π
album_buffer = defaultdict(list)
ALBUM_TIMEOUT = 3.0  # –£–≤–µ–ª–∏—á–∏–ª –¥–æ 3 —Å–µ–∫—É–Ω–¥
album_processing = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –∞–ª—å–±–æ–º—ã

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SEND_INTERVAL = 30 * 60  # 30 –º–∏–Ω—É—Ç
is_sending = False

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def load_queue():
    if not os.path.exists(QUEUE_FILE):
        return []
    with open(QUEUE_FILE, 'r', encoding='utf-8') as f:
        return [line.strip() for line in f if line.strip()]

def save_queue(queue):
    with open(QUEUE_FILE, 'w', encoding='utf-8') as f:
        for item in queue:
            f.write(item + '\n')

def load_state():
    if not os.path.exists(STATE_FILE):
        return {"is_paused": False, "next_send_time": 0}
    with open(STATE_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_state(state):
    with open(STATE_FILE, 'w', encoding='utf-8') as f:
        json.dump(state, f)

def is_paused():
    return load_state().get("is_paused", False)

def set_paused(paused: bool):
    state = load_state()
    state["is_paused"] = paused
    save_state(state)

def get_next_send_time():
    return load_state().get("next_send_time", 0)

def set_next_send_time():
    state = load_state()
    state["next_send_time"] = time.time() + SEND_INTERVAL
    save_state(state)

def should_send_now():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
    if is_paused():
        return False
    next_time = get_next_send_time()
    return next_time <= time.time()

def get_time_until_next_send():
    if is_paused():
        return "‚è∏ –ù–∞ –ø–∞—É–∑–µ"
    
    if should_send_now():
        return "‚ö° –ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"
    
    next_time = get_next_send_time()
    now = time.time()
    diff = int(next_time - now)
    
    if diff < 60:
        return f"‚è∞ –ß–µ—Ä–µ–∑ {diff} —Å–µ–∫"
    mins = diff // 60
    secs = diff % 60
    return f"‚è∞ –ß–µ—Ä–µ–∑ {mins} –º–∏–Ω {secs} —Å–µ–∫"

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
def get_control_keyboard():
    status = "‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if not is_paused() else "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å"
    callback = "pause" if not is_paused() else "resume"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=status, callback_data=callback)],
        [InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="publish_now")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")],
        [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª—å–±–æ–º—ã", callback_data="check_albums")]
    ])

def get_status_text():
    count = len(load_queue())
    status = "‚è∏ –Ω–∞ –ø–∞—É–∑–µ" if is_paused() else "‚ñ∂Ô∏è —Ä–∞–±–æ—Ç–∞–µ—Ç"
    albums_count = len(album_buffer) + len(album_processing)
    album_info = f"\nüì¶ –ê–ª—å–±–æ–º—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {albums_count}" if albums_count > 0 else ""
    return f"üì∏ –í –æ—á–µ—Ä–µ–¥–∏: {count} —Ñ–æ—Ç–æ\n–°—Ç–∞—Ç—É—Å: {status}{album_info}\n{get_time_until_next_send()}"

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message()
async def handle_all_messages(message: types.Message):
    if message.chat.id == TARGET_CHAT_ID:
        return
    if message.text == "/start":
        try:
            await message.answer(get_status_text(), reply_markup=get_control_keyboard())
        except TelegramForbiddenError:
            logging.warning("–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    elif message.photo:
        file_id = message.photo[-1].file_id
        media_group_id = message.media_group_id

        if media_group_id is None:
            # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
            queue = load_queue()
            queue.append(file_id)
            save_queue(queue)
            count = len(queue)
            logging.info(f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ: {count}")
            try:
                await message.answer(f"üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å!\n–ü–æ–∑–∏—Ü–∏—è: #{count}", reply_markup=get_control_keyboard())
            except TelegramForbiddenError:
                pass
        else:
            # –ê–ª—å–±–æ–º - —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            logging.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ {media_group_id}")
            album_buffer[media_group_id].append((message.message_id, file_id))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–ª—å–±–æ–º–∞ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
            if len(album_buffer[media_group_id]) == 1:
                album_processing.add(media_group_id)
                
                async def process_album():
                    try:
                        # –ñ–¥–µ–º –¥–æ–ª—å—à–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                        await asyncio.sleep(ALBUM_TIMEOUT)
                        
                        if media_group_id in album_buffer:
                            photos = sorted(album_buffer[media_group_id], key=lambda x: x[0])
                            new_ids = [fid for _, fid in photos]
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –≤ –æ—á–µ—Ä–µ–¥—å
                            queue = load_queue()
                            start_pos = len(queue) + 1
                            queue.extend(new_ids)
                            save_queue(queue)
                            count = len(queue)
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏
                            logging.info(f"‚úÖ –ê–ª—å–±–æ–º {media_group_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(new_ids)} —Ñ–æ—Ç–æ. –ü–æ–∑–∏—Ü–∏–∏: {start_pos}-{count}")
                            
                            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
                            del album_buffer[media_group_id]
                            album_processing.discard(media_group_id)
                            
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            try:
                                await message.answer(
                                    f"üì¶ –ê–ª—å–±–æ–º –∏–∑ {len(new_ids)} —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                                    f"üìç –ü–æ–∑–∏—Ü–∏–∏: #{start_pos}-#{count}",
                                    reply_markup=get_control_keyboard()
                                )
                            except TelegramForbiddenError:
                                pass
                                
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª—å–±–æ–º–∞ {media_group_id}: {e}")
                        album_processing.discard(media_group_id)
                
                asyncio.create_task(process_album())

# === –ö–Ω–æ–ø–∫–∏ ===
@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    if callback.message.chat.id == TARGET_CHAT_ID:
        return
    action = callback.data

    if action == "pause":
        set_paused(True)
        scheduler.remove_all_jobs()
        await callback.answer("‚è∏ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    elif action == "resume":
        set_paused(False)
        set_next_send_time()
        scheduler.remove_all_jobs()
        # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        asyncio.create_task(send_next_photo())
        # –ü–æ—Ç–æ–º ‚Äî –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        scheduler.add_job(
            send_next_photo,
            'interval',
            minutes=30,
            id='half_hour_send'
        )
        await callback.answer("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ! –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...")
    elif action == "publish_now":
        if is_paused():
            await callback.answer("‚ùå –ù–∞ –ø–∞—É–∑–µ")
            return
        queue = load_queue()
        if not queue:
            await callback.answer("‚ùå –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
            return
        success = await send_next_photo_immediately()
        await callback.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!" if success else "‚ùå –û—à–∏–±–∫–∞")
    elif action == "check_albums":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–ª—å–±–æ–º–æ–≤
        active_albums = len(album_buffer) + len(album_processing)
        if active_albums > 0:
            await callback.answer(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–ª—å–±–æ–º–æ–≤: {active_albums}")
        else:
            await callback.answer("‚úÖ –ù–µ—Ç –∞–ª—å–±–æ–º–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    elif action == "refresh":
        try:
            await callback.message.edit_text(get_status_text(), reply_markup=get_control_keyboard())
            await callback.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ")
        except TelegramBadRequest:
            await callback.answer("‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ")

    if action != "refresh":
        try:
            await callback.message.edit_text(get_status_text(), reply_markup=get_control_keyboard())
        except TelegramBadRequest:
            pass

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ ===
async def send_next_photo_immediately():
    global is_sending
    if is_sending or is_paused():
        return False
    queue = load_queue()
    if not queue:
        return False
    is_sending = True
    try:
        file_id = queue.pop(0)
        await bot.send_photo(chat_id=TARGET_CHAT_ID, photo=file_id)
        logging.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å: {len(queue)}")
        set_next_send_time()
        save_queue(queue)
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        queue.insert(0, file_id)
        save_queue(queue)
        return False
    finally:
        is_sending = False

async def send_next_photo():
    global is_sending
    if is_sending or is_paused():
        return
    
    if not should_send_now():
        logging.info(f"‚è≥ –ï—â—ë –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ñ–¥—ë–º...")
        return
    
    queue = load_queue()
    if not queue:
        state = load_state()
        state["next_send_time"] = 0
        save_state(state)
        logging.info("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
        return
    
    is_sending = True
    try:
        file_id = queue.pop(0)
        await bot.send_photo(chat_id=TARGET_CHAT_ID, photo=file_id)
        logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. –û—Å—Ç–∞–ª–æ—Å—å: {len(queue)}")
        set_next_send_time()
        save_queue(queue)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        queue.insert(0, file_id)
        save_queue(queue)
    finally:
        is_sending = False

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    logging.info("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    scheduler.remove_all_jobs()
    
    if not is_paused():
        if get_next_send_time() == 0:
            set_next_send_time()
        
        # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        asyncio.create_task(send_next_photo())
        
        # –ü–æ—Ç–æ–º ‚Äî –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        scheduler.add_job(
            send_next_photo,
            'interval',
            minutes=30,
            id='half_hour_send'
        )
        logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å—Ä–∞–∑—É, –ø–æ—Ç–æ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω")

    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
