import logging
import sqlite3
import os
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from PIL import Image
import imagehash

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "0"))
DB_FILE = "photos.db"

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö–µ—à–µ–π"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS photo_hashes (
            hash TEXT PRIMARY KEY,
            message_id INTEGER
        )
    """)
    conn.commit()
    conn.close()

def save_photo_hash(img_hash: str, message_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ö–µ—à —Ñ–æ—Ç–æ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT OR REPLACE INTO photo_hashes (hash, message_id) VALUES (?, ?)",
            (img_hash, message_id)
        )
        conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–∞: {e}")
    finally:
        conn.close()

def get_photo_message_id(img_hash: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º —Ñ–æ—Ç–æ"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT message_id FROM photo_hashes WHERE hash = ?", (img_hash,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

async def check_duplicate_photo(update: Update, context: ContextTypes.DEFAULT_TYPE, img_hash: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç —Ñ–æ—Ç–æ –∏ —É–¥–∞–ª—è–µ—Ç –µ—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    original_message_id = get_photo_message_id(img_hash)
    
    if original_message_id is None:
        return False
    
    try:
        original_message = await context.bot.get_message(
            chat_id=update.effective_chat.id,
            message_id=original_message_id
        )
        if original_message:
            mention = f"@{update.effective_user.username}" if update.effective_user.username else update.effective_user.first_name
            await update.message.reply_text(
                f"‚ö†Ô∏è {mention}, —ç—Ç–æ —Ñ–æ—Ç–æ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–µ–Ω–æ —Ä–∞–Ω–µ–µ!",
                reply_to_message_id=update.message.message_id
            )
            await update.message.delete()
            return True
    except Exception:
        pass
    
    return False

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ"""
    user = update.effective_user
    message = update.message

    if user.id == ADMIN_USER_ID:
        return

    if len(message.photo) > 2:
        await message.reply_text(
            "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –±–æ–ª—å—à–µ 2 —Ñ–æ—Ç–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!",
            reply_to_message_id=message.message_id
        )
        return

    for photo in message.photo:
        file = await context.bot.get_file(photo.file_id)
        file_path = f"temp_{photo.file_id}.jpg"
        await file.download_to_drive(file_path)

        try:
            image = Image.open(file_path)
            img_hash = str(imagehash.average_hash(image))

            is_duplicate = await check_duplicate_photo(update, context, img_hash)
            if not is_duplicate:
                save_photo_hash(img_hash, message.message_id)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        finally:
            if os.path.exists(file_path):
                os.remove(file_path)

def main():
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )

    init_db()

    app = Application.builder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏ –≤–Ω–µ—à–Ω–∏–π URL –æ—Ç Render
    PORT = int(os.environ.get("PORT", 8443))
    RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")  # Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–¥–∞—ë—Ç —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    if not RENDER_EXTERNAL_URL:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è RENDER_EXTERNAL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

    WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}/{TOKEN}"

    logging.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook –Ω–∞: {WEBHOOK_URL}")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,  # –ø—É—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É Telegram –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()
