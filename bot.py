
import logging
import os
import sqlite3
import time
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from PIL import Image
import imagehash

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "0"))
DB_FILE = "photos.db"

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–ª—å–±–æ–º–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
temp_albums = {}
user_photo_count = {}
# –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
processing_lock = False

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS hashes (hash TEXT PRIMARY KEY)")
    conn.commit()
    conn.close()

def hash_exists(img_hash):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT 1 FROM hashes WHERE hash = ?", (img_hash,))
    return cursor.fetchone() is not None

def save_hash(img_hash):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO hashes (hash) VALUES (?)", (img_hash,))
        conn.commit()
    except sqlite3.IntegrityError:
        pass
    conn.close()

async def check_photos_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –∞–ª—å–±–æ–º–∞—Ö –∏ –ø–æ –æ–¥–Ω–æ–º—É"""
    global processing_lock
    
    # –ñ–¥–µ–º –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    while processing_lock:
        await asyncio.sleep(0.1)
    
    processing_lock = True
    try:
        user = update.effective_user
        message = update.message
        
        # –ê–¥–º–∏–Ω–∞–º –º–æ–∂–Ω–æ –≤—Å—ë
        if user.id == ADMIN_USER_ID:
            return
            
        if not message or not message.photo:
            return
        
        current_time = time.time()
        user_id = user.id
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç–∞—Ä—à–µ 10 —Å–µ–∫—É–Ω–¥)
        users_to_remove = []
        for uid, data in list(user_photo_count.items()):
            if current_time - data.get('timestamp', 0) > 10:  # 10 —Å–µ–∫—É–Ω–¥
                users_to_remove.append(uid)
        for uid in users_to_remove:
            del user_photo_count[uid]
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ª—å–±–æ–º—ã (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        albums_to_remove = []
        for aid, data in list(temp_albums.items()):
            if current_time - data.get('timestamp', 0) > 3600:
                albums_to_remove.append(aid)
        for aid in albums_to_remove:
            del temp_albums[aid]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ (–Ω–µ –∞–ª—å–±–æ–º)
        if not message.media_group_id:
            if user_id not in user_photo_count:
                user_photo_count[user_id] = {
                    'count': 1,
                    'timestamp': current_time,
                    'warning_sent': False,
                    'username': user.username or user.first_name,
                    'last_message_id': message.message_id
                }
            else:
                user_photo_count[user_id]['count'] += 1
                user_photo_count[user_id]['timestamp'] = current_time
                user_photo_count[user_id]['last_message_id'] = message.message_id
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –±–æ–ª—å—à–µ 2 —Ñ–æ—Ç–æ –∑–∞ 10 —Å–µ–∫—É–Ω–¥
            if (user_photo_count[user_id]['count'] >= 3 and 
                not user_photo_count[user_id]['warning_sent']):
                
                warning = "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –±–æ–ª—å—à–µ 2 —Ñ–æ—Ç–æ –ø–æ–¥—Ä—è–¥! –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
                await message.reply_text(warning, reply_to_message_id=user_photo_count[user_id]['last_message_id'])
                user_photo_count[user_id]['warning_sent'] = True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å–±–æ–º–æ–≤ (–≥—Ä—É–ø–ø —Ñ–æ—Ç–æ)
        else:
            album_id = message.media_group_id
            
            if album_id not in temp_albums:
                temp_albums[album_id] = {
                    'count': 1,
                    'first_message_id': message.message_id,
                    'warning_sent': False,
                    'timestamp': current_time
                }
            else:
                temp_albums[album_id]['count'] += 1
                
            # –ï—Å–ª–∏ –≤ –∞–ª—å–±–æ–º–µ –±–æ–ª—å—à–µ 2 —Ñ–æ—Ç–æ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å
            if (temp_albums[album_id]['count'] > 2 and 
                not temp_albums[album_id]['warning_sent']):
                
                warning = "üì∏ –í –∞–ª—å–±–æ–º–µ –±–æ–ª—å—à–µ 2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
                await message.reply_text(warning, 
                                       reply_to_message_id=temp_albums[album_id]['first_message_id'])
                temp_albums[album_id]['warning_sent'] = True
    finally:
        processing_lock = False

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ + –ª–∏–º–∏—Ç–æ–≤)"""
    user = update.effective_user
    message = update.message

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ
    await check_photos_limit(update, context)
    
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if user.id == ADMIN_USER_ID:
        return

    # –ó–∞—â–∏—Ç–∞ –æ—Ç None
    if not message or not message.photo:
        return

    photo = message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    file_path = f"temp_{photo.file_id}.jpg"
    await file.download_to_drive(file_path)

    try:
        image = Image.open(file_path)
        img_hash = str(imagehash.average_hash(image))

        if hash_exists(img_hash):
            mention = f"@{user.username}" if user.username else f"[{user.first_name}](tg://user?id={user.id})"
            await update.effective_chat.send_message(
                text=f"‚ö†Ô∏è {mention}, —ç—Ç–æ —Ñ–æ—Ç–æ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ!",
                reply_to_message_id=message.message_id,
                parse_mode="Markdown"
            )
            await message.delete()
        else:
            save_hash(img_hash)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)

def main():
    if not TOKEN:
        raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞! –î–æ–±–∞–≤—å –µ—ë –≤ Environment Variables –Ω–∞ Render.")

    logging.basicConfig(level=logging.INFO)
    init_db()

    app = Application.builder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    # –í–°–ï–ì–î–ê –ò–°–ü–û–õ–¨–ó–£–ï–ú POLLING –î–õ–Ø RENDER
    logging.info("‚úÖ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling –¥–ª—è Render")
    app.run_polling()

if __name__ == "__main__":
    main()
