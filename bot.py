import os
import json
import logging
import time
import asyncio
from collections import defaultdict
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import BOT_TOKEN, TARGET_CHAT_ID, QUEUE_FILE, STATE_FILE

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ===
logging.basicConfig(level=logging.INFO)
application = Application.builder().token(BOT_TOKEN).build()
scheduler = AsyncIOScheduler()

# –ë—É—Ñ–µ—Ä –¥–ª—è –∞–ª—å–±–æ–º–æ–≤
album_buffer = defaultdict(list)
ALBUM_TIMEOUT = 3.0
album_processing = set()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SEND_INTERVAL = 30 * 60  # 30 –º–∏–Ω—É—Ç
is_sending = False

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def load_queue():
    if not os.path.exists(QUEUE_FILE):
        return []
    with open(QUEUE_FILE, 'r', encoding='utf-8') as f:
        return [line.strip() for line in f if line.strip()]

def save_queue(queue):
    with open(QUEUE_FILE, 'w', encoding='utf-8') as f:
        for item in queue:
            f.write(item + '\n')

def load_state():
    if not os.path.exists(STATE_FILE):
        return {"is_paused": False, "next_send_time": 0}
    with open(STATE_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_state(state):
    with open(STATE_FILE, 'w', encoding='utf-8') as f:
        json.dump(state, f)

def is_paused():
    return load_state().get("is_paused", False)

def set_paused(paused: bool):
    state = load_state()
    state["is_paused"] = paused
    save_state(state)

def get_next_send_time():
    return load_state().get("next_send_time", 0)

def set_next_send_time():
    state = load_state()
    state["next_send_time"] = time.time() + SEND_INTERVAL
    save_state(state)

def should_send_now():
    if is_paused():
        return False
    next_time = get_next_send_time()
    return next_time <= time.time()

def get_time_until_next_send():
    if is_paused():
        return "‚è∏ –ù–∞ –ø–∞—É–∑–µ"
    
    if should_send_now():
        return "‚ö° –ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"
    
    next_time = get_next_send_time()
    now = time.time()
    diff = int(next_time - now)
    
    if diff < 60:
        return f"‚è∞ –ß–µ—Ä–µ–∑ {diff} —Å–µ–∫"
    mins = diff // 60
    secs = diff % 60
    return f"‚è∞ –ß–µ—Ä–µ–∑ {mins} –º–∏–Ω {secs} —Å–µ–∫"

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
def get_control_keyboard():
    status = "‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if not is_paused() else "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å"
    callback = "pause" if not is_paused() else "resume"
    
    keyboard = [
        [InlineKeyboardButton(status, callback_data=callback)],
        [InlineKeyboardButton("üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="publish_now")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")],
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª—å–±–æ–º—ã", callback_data="check_albums")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_status_text():
    count = len(load_queue())
    status = "‚è∏ –Ω–∞ –ø–∞—É–∑–µ" if is_paused() else "‚ñ∂Ô∏è —Ä–∞–±–æ—Ç–∞–µ—Ç"
    albums_count = len(album_buffer) + len(album_processing)
    album_info = f"\nüì¶ –ê–ª—å–±–æ–º—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {albums_count}" if albums_count > 0 else ""
    return f"üì∏ –í –æ—á–µ—Ä–µ–¥–∏: {count} —Ñ–æ—Ç–æ\n–°—Ç–∞—Ç—É—Å: {status}{album_info}\n{get_time_until_next_send()}"

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id == TARGET_CHAT_ID:
        return
    
    await update.message.reply_text(
        get_status_text(),
        reply_markup=get_control_keyboard()
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ===
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id == TARGET_CHAT_ID:
        return
    
    photo = update.message.photo[-1]
    file_id = photo.file_id
    media_group_id = update.message.media_group_id

    if media_group_id is None:
        # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
        queue = load_queue()
        queue.append(file_id)
        save_queue(queue)
        count = len(queue)
        logging.info(f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ: {count}")
        await update.message.reply_text(
            f"üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å!\n–ü–æ–∑–∏—Ü–∏—è: #{count}",
            reply_markup=get_control_keyboard()
        )
    else:
        # –ê–ª—å–±–æ–º
        logging.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ {media_group_id}")
        album_buffer[media_group_id].append((update.message.id, file_id))
        
        if len(album_buffer[media_group_id]) == 1:
            album_processing.add(media_group_id)
            
            async def process_album():
                try:
                    await asyncio.sleep(ALBUM_TIMEOUT)
                    
                    if media_group_id in album_buffer:
                        photos = sorted(album_buffer[media_group_id], key=lambda x: x[0])
                        new_ids = [fid for _, fid in photos]
                        
                        queue = load_queue()
                        start_pos = len(queue) + 1
                        queue.extend(new_ids)
                        save_queue(queue)
                        count = len(queue)
                        
                        logging.info(f"‚úÖ –ê–ª—å–±–æ–º {media_group_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(new_ids)} —Ñ–æ—Ç–æ. –ü–æ–∑–∏—Ü–∏–∏: {start_pos}-{count}")
                        
                        del album_buffer[media_group_id]
                        album_processing.discard(media_group_id)
                        
                        await update.message.reply_text(
                            f"üì¶ –ê–ª—å–±–æ–º –∏–∑ {len(new_ids)} —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                            f"üìç –ü–æ–∑–∏—Ü–∏–∏: #{start_pos}-#{count}",
                            reply_markup=get_control_keyboard()
                        )
                            
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª—å–±–æ–º–∞ {media_group_id}: {e}")
                    album_processing.discard(media_group_id)
            
            asyncio.create_task(process_album())

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.message.chat.id == TARGET_CHAT_ID:
        return
    
    action = query.data

    if action == "pause":
        set_paused(True)
        scheduler.remove_all_jobs()
        await query.edit_message_text(get_status_text(), reply_markup=get_control_keyboard())
        
    elif action == "resume":
        set_paused(False)
        set_next_send_time()
        scheduler.remove_all_jobs()
        
        # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        asyncio.create_task(send_next_photo())
        
        # –ü–æ—Ç–æ–º ‚Äî –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        scheduler.add_job(
            send_next_photo,
            'interval',
            minutes=30,
            id='half_hour_send'
        )
        await query.edit_message_text(get_status_text(), reply_markup=get_control_keyboard())
        
    elif action == "publish_now":
        if is_paused():
            await query.answer("‚ùå –ù–∞ –ø–∞—É–∑–µ", show_alert=True)
            return
            
        queue = load_queue()
        if not queue:
            await query.answer("‚ùå –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", show_alert=True)
            return
            
        success = await send_next_photo_immediately()
        await query.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!" if success else "‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        await query.edit_message_text(get_status_text(), reply_markup=get_control_keyboard())
        
    elif action == "check_albums":
        active_albums = len(album_buffer) + len(album_processing)
        if active_albums > 0:
            await query.answer(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–ª—å–±–æ–º–æ–≤: {active_albums}")
        else:
            await query.answer("‚úÖ –ù–µ—Ç –∞–ª—å–±–æ–º–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
            
    elif action == "refresh":
        await query.edit_message_text(get_status_text(), reply_markup=get_control_keyboard())

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ ===
async def send_next_photo_immediately():
    global is_sending
    if is_sending or is_paused():
        return False
        
    queue = load_queue()
    if not queue:
        return False
        
    is_sending = True
    try:
        file_id = queue.pop(0)
        await application.bot.send_photo(chat_id=TARGET_CHAT_ID, photo=file_id)
        logging.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å: {len(queue)}")
        set_next_send_time()
        save_queue(queue)
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        queue.insert(0, file_id)
        save_queue(queue)
        return False
    finally:
        is_sending = False

async def send_next_photo():
    global is_sending
    if is_sending or is_paused():
        return
    
    if not should_send_now():
        logging.info(f"‚è≥ –ï—â—ë –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ñ–¥—ë–º...")
        return
    
    queue = load_queue()
    if not queue:
        state = load_state()
        state["next_send_time"] = 0
        save_state(state)
        logging.info("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
        return
    
    is_sending = True
    try:
        file_id = queue.pop(0)
        await application.bot.send_photo(chat_id=TARGET_CHAT_ID, photo=file_id)
        logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. –û—Å—Ç–∞–ª–æ—Å—å: {len(queue)}")
        set_next_send_time()
        save_queue(queue)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        queue.insert(0, file_id)
        save_queue(queue)
    finally:
        is_sending = False

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    logging.info("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.remove_all_jobs()
    
    if not is_paused():
        if get_next_send_time() == 0:
            set_next_send_time()
        
        # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        asyncio.create_task(send_next_photo())
        
        # –ü–æ—Ç–æ–º ‚Äî –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        scheduler.add_job(
            send_next_photo,
            'interval',
            minutes=30,
            id='half_hour_send'
        )
        logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å—Ä–∞–∑—É, –ø–æ—Ç–æ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω")

    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
